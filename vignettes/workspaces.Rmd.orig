---
title: "Using workspaces"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Using workspaces}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

To store the assigned data in the Armadillo service, you can use workspaces to make sure a certain state of the data is maintained on the service.

Saving the workspaces can be done during `datashield.logout` or at runtime. Please be aware that if your workspace is too big to store on the server, it won't save and you'll get an error message. If this happens,
please try cleaning up the workspace as much as possible and try again. If it still doesn't work, please
contact the administrator of the server, to ask if the diskspace can be increased. 

```{r, saving workspaces, messages=FALSE}
library(dsBaseClient)
library(DSMolgenisArmadillo)

# specify server url
armadillo_url <- "https://armadillo-demo.molgenis.net/"

# get token from central authentication server
token <- armadillo.get_token(armadillo_url)

# build the login dataframe
builder <- DSI::newDSLoginBuilder()
builder$append(server = "armadillo",
               url = armadillo_url,
               token = token,
               table = "gecko/2_1-core-1_0/nonrep",
               driver = "ArmadilloDriver")

# create loginframe
logindata <- builder$build()

conns <- DSI::datashield.login(login = logindata)

datashield.assign.table(conns = conns,
                        table = "gecko/2_1-core-1_0/nonrep",
                        symbol = "J",
                        variables = c("recruit_age", "child_id"))

datashield.logout(conns, save = "my-workspace")

conns <- DSI::datashield.login(logins = logindata,
                          assign = FALSE,
                          restore = "my-workspace")

datashield.symbols(conns)
datashield.workspace_save(conns, "my-workspace-version-2")
```

You can overwrite workspaces using the same name again when saving the workspace.

```{r, overwrite using the same name}
datashield.logout(conns)
conns <- DSI::datashield.login(logins = logindata)

datashield.assign.table(conns = conns,
                        table = "gecko/2_1-core-1_0/nonrep",
                        symbol = "H")

datashield.workspace_save(conns, "my-workspace-overwritten")
datashield.workspace_save(conns, "my-workspace-overwritten")
```

You can list the workspaces as well.

```{r, list workspaces}
datashield.workspaces(conns$armadillo)
```

Remove workspaces.

```{r, remove a workspace}
datashield.workspace_rm(conns, "my-workspace-overwritten")
datashield.workspaces(conns)
```