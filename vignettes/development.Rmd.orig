---
title: "Develop DSMolgenisArmadillo"
output: html_vignette
vignette: >
  %\VignetteIndexEntry{Develop DSMolgenisArmadillo}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE, comment = "#>", out.width = "100%",
  fig.width = 7, fig.height = 4, dpi = 150, fig.path = "DSMolgenisArmadillo-",
  message = FALSE, warning = FALSE, error = FALSE
)
```

### Testing
The test are run each time you file a pull request on github. You can run the test locally as well using the following commands:

```{r, show how to test the package}
# load prerequisites
library(tibble)

# run all tests
devtools::test()
```

```{r, run all tests without breaking, eval = FALSE}
# run all tests without stopping when tests fail
devtools::test(reporter = ProgressReporter$new(max_failures = 999999))
```

```{r, test a single file, eval = FALSE}
# run a single test file
# make sure you have the test file open
# e.g. test-ArmadilloResult.R

devtools::test_file()
```

### Vignettes
We use vignettes to expose the usage of the package. It includes examples of regular use cases and shows you how to setup the package.

The vignettes are automatically build and you can run them locally with the following command:

```{r, prepare vignettes, eval = FALSE}
knitr::knit("vignettes/DSMolgenisArmadillo.Rmd.orig", output = "vignettes/DSMolgenisArmadillo.Rmd")
```

If you only want the R-output use:

```{r, generate R-code of vignettes, eval = FALSE}
knitr::purl("vignettes/DSMolgenisArmadillo.Rmd.orig", output = "vignettes/DSMolgenisArmadillo.R")
```

### Tips and tricks
Some tips and tricks when you developing on DSMolgenisArmadillo

#### Authentication
You can login with basic auth when you are developing. The default credentials are username: admin and password: admin.

```{r, login frame with basic authentication}
library(DSMolgenisArmadillo)

armadillo_url <- "https://armadillo-demo.molgenis.net"

builder <- DSI::newDSLoginBuilder()

builder$append(
  server = "armadillo",
  url = armadillo_url,
  user = "admin",
  password = "password",
  driver = "ArmadilloDriver",
  table = "gecko/2_1-core-1_0/nonrep",
  profile = "xenon",
  )

login_data <- builder$build()

conns <- DSI::datashield.login(logins = login_data, assign = TRUE)
```

#### Version of the package
You can determine which version of the DSMolgenisArmadillo you are running by executing the following code:

```{r, get package information}
dsGetInfo(armadillo())
```

#### Table handling
You can use several methods checking if tables in DataSHIELD. For checking existence of the tables you can use the following methods.

```{r, check if table exists}
dsHasTable(conns$armadillo, "gecko/2_1-core-1_0/nonrep")
dsHasTable(conns$armadillo, "gecko/1_1-outcome-1_0/nonrep")
```

To check the accessibility you can use the `table_status` methods.

```{r, check if the table nonrep is accessible}
datashield.table_status(conns, "gecko/2_1-core-1_0/nonrep")
```

To check which tables are assigned you can use the `dsListTables` function.

```{r, list all tables}
dsListTables(conns$armadillo)
```

#### Methods and packages
In DataSHIELD you can use a variety of methods and packages. To check which are avaiable you can execute the following code:

##### Available packages (serverside)
The available packages displayed by the method, are the serverside R-packages. Which means the packages available on the Armadillo.

```{r, check packages}
conns <- DSI::datashield.login(logins = login_data, assign = F)
dsListPackages(conns$armadillo)
```

##### Available methods (clientside)
These are the available methods on the Armadillo server.

```{r, check methods}
datashield.methods(conns = conns, type = "aggregate")
datashield.methods(conns = conns, type = "assign")
```





